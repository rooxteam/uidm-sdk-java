= Integration Guide плагина поддержки OTP через M2M
:toc:
:toc-title: Содержание документа
:toclevels: 4
:sectlinks:
:numbered:
:icons: font
:header_footer:
:homepage: http://rooxteam.com
:revnumber: 1.0.0
:version-label: Версия

== История изменений

[options="header"]
|===
|Версия документа|Дата изменения|Комментарий
|v1.0.0|2016-09-09|Создание документа.
|===

== Общие положения
* Все параметры запросов и ответов, атрибуты пользователей и прочие параметры являются регистрозависимыми
* Все параметры запросов и ответов являются обязательными, если явно не указано обратное
* Переносы строк в некоторых примерах запросов добавлены для удобства чтения, реальная строка запроса должна быть без них
* Клиент должен поддерживать HTTP cookies
* Вся работа с повышением уровня должна проводиться при наличии в cookies базового токена авторизации,
полученного на этапе логина.
* Обработка непредвиденных исключений,
возникающих в ходе работы компонента,
является зоной ответственности WebAPI
и должна осуществляться обрботчиками ошибок на его стороне.

== Интеграция на стороне WebAPI

Для интеграции необходимо обеспечить присутствие артефакта otp-m2m-plugin из группы com.rooxteam.sso,
а также всех его зависимостей,
в classpath сервиса,
которому требуется интеграция.
Далее,
необходимо подключить плагин через стандартную систему импортов Spring Context:

[source,java]
----

    import com.rooxteam.otp.m2m.configuration.M2MOtpPlugin;

    @Import(M2MOtpPlugin.class)
    public class Application {
        // ... Custom app configuration here
    }
----

После этих действий
точка входа плагина будет доступна в +DispatcherServlet+,
обслуживающем данный +ApplicationContext+.
Точки входа
и их API
описаны в соответствующем разделе данного документа.

== Интеграция на стороне виджета

IMPORTANT: Для интеграции с виджетом необходимо сначала выполнить интеграцию с WebAPI,
описанную в соответствующем разделе документа.
В дальнейшем,
виджет будет зависеть от наличия соответствующих точек входа на стороне WebAPI,
предоставляемых данным компонентом.

=== Диаграмма взаимодействия с WebAPI для получения токена повышенного уровня

Ниже описан общий принцип получения токена повышенного уровня через OTP.
Обработка ошибок остается на усмотрение разработчиков виджета.

["plantuml", "elevation-webapi-m2m", "png"]
---------------------------------------------------------------------
@startuml

[*] --> START

START: Изначальный запрос OTP
START --> OTP_REQUIRED : /otp/send

OTP_REQUIRED: Необходимо ввести полученный код, либо запросить повторный
OTP_REQUIRED --> OTP_REQUIRED : /otp/resend (повторная отправка)
OTP_REQUIRED --> OTP_REQUIRED : /otp/validate (проверка кода провалилась)
OTP_REQUIRED --> SUCCESS : /otp/validate (проверка кода прошла успешно)

SUCCESS: Код проверен, выдан токен под операцию
SUCCESS --> [*]

@enduml
---------------------------------------------------------------------

=== Первоначальный запрос отправки OTP кода

В первом запросе необходимо передать контекст операции,
для которой запрашивается токен.
В дальнейшем, эта информация будет привязана к выданному под эту операцию токену.

----
POST /otp/send?msisdn=${msisdn}&service=${service}
Host: <webapi_host>
Accept: application/json
Content-Type: application/json
{
    "actionName": "${action}",
    "resourceName": "${resource_name}",
    "serviceName": "iPlanetAMWebAgentService",
    "realm": "/customer",
    "envParams": {${params}}
}
----
* +<webapi_host>+ - базовый адрес WebAPI
* +<msisdn>+ - номер телефона,
на который следует послать OTP.
Eсли не указан, будет использован номер телефона (msisdn) пользователя
* +<service>+ - Имя сценария в Customer SSO для AAL.
Eсли не указано - возьмется из настроек
* +<action>+ - действие,
указанное в политиках SSO,
которое трубестя совершить (например, GET, POST)
* +<resource_name>+ - имя ресурса, к которому осуществляется доступ.
Должно совпадать с именем ресурса,
указазанным в соответствующей политике SSO.
* +<params>+ - Произвольные параметры (в виде key-value пар из двух строк),
которые требуются для вычисления политики.
По умолчанию, пустой набор.

==== Формат ответа

[source,json]
----
HTTP/1.1 200 OK
Content-Type: application/json
{
  "status": "${status}",
  "otpFlowState": {
    ...
  },
  "availableAttempts": 6,
  "blockedFor": 0
}
----
* +<status>+ - строка ответа сервиса.
Значение 'OTP_REQUIRED' означает успешную отправку
и необходимость ввести OTP.
Полный список статусов и их описания доступны в разделе <<status-codes>>
* +<otpFlowState>+ - прозрачная для виджета структура,
содержащая метаданные flow.
 Содержимое этого поля необходимо передавать в качестве тела в следующий запрос.
* +<availableAttempts>+ - количество оставшихся попыток ввода кода.
* +<blockedFor>+ - время в секундах;
интерпретация зависит от значения в поле +status+.
Возможные значения +status+ перечислены в соответствующем разделе.

=== Повторный запрос отправки OTP кода

----
POST /otp/resend?service=${service}
Host: <webapi_host>
Accept: application/json
Content-Type: application/json
${otpFlowState}
----
* +<webapi_host>+ - базовый адрес WebAPI
* +<service>+ - Имя сценария в Customer SSO для AAL.
Eсли не указано - возьмется из настроек
* +<otpFlowState>+ - объект,
полученный в одноименном поле в ответе на предыдущий запрос.

==== Формат ответа
[source,json]
----
HTTP/1.1 200 OK
Content-Type: application/json
{
  "status": "${status}",
  "otpFlowState": {
    ...
  },
  "availableAttempts": 6,
  "blockedFor": 0
}
----
* +<status>+ - строка ответа сервиса.
Значение 'OTP_REQUIRED' означает успешную отправку
и необходимость ввести OTP.
Полный список статусов и их описания доступны в разделе <<status-codes>>
* +<otpFlowState>+ - прозрачная для виджета структура,
содержащая метаданные flow.
 Содержимое этого поля необходимо передавать в качестве тела в следующий запрос.
* +<availableAttempts>+ - количество оставшихся попыток ввода кода.
* +<blockedFor>+ - время в секундах;
интерпретация зависит от значения в поле +status+.
Возможные значения +status+ перечислены в соответствующем разделе.

=== Запрос валидации введенного кода

----
POST /otp/validate?otpCode=${code}&service=${service}
Host: <webapi_host>
Accept: application/json
Content-Type: application/json
${otpFlowState}
----
* +<webapi_host>+ - базовый адрес WebAPI
* +<code>+ - введенный пользователем OTP
* +<service>+ - Имя сценария в Customer SSO для AAL.
Eсли не указано - возьмется из настроек
* +<otpFlowState>+ - объект,
полученный в одноименном поле в ответе на предыдущий запрос.

==== Формат успешного ответа
[source,json]
----
HTTP/1.1 200 OK
Content-Type: application/json
{
  "status": "SUCCESS",
  "token": "${token}"
}
----
* +<token>+ - запрошенный для операции токен,
который необходимо будет предоставить запросу на WebAPI.

==== Формат неуспешного ответа
[source,json]
----
HTTP/1.1 200 OK
Content-Type: application/json
{
  "status": "${status}",
  "otpFlowState": {
    ...
  },
  "availableAttempts": 6,
  "blockedFor": 0
}
----
* +<status>+ - строка ответа сервиса.
Список статусов и их описания доступны в разделе <<status-codes>>
* +<otpFlowState>+ - прозрачная для виджета структура,
содержащая метаданные flow.
Содержимое этого поля необходимо передавать в качестве тела в следующий запрос.
* +<availableAttempts>+ - количество оставшихся попыток ввода кода.
* +<blockedFor>+ - время в секундах;
интерпретация зависит от значения в поле +status+.
Возможные значения +status+ перечислены в соответствующем разделе.

IMPORTANT: В случае предоставления неверного OTP,
при условии,
что пользователю не была заблокирована проверка кодов из-за превышения числа попыток,
будет возвращен статус +OTP_REQUIRED+,
а значение availableAttempts будет на единицу меньше, чем в предыдущем таком запросе.

[[status-codes]]
=== Значения статуса операции

В поле +status+ может быть возвращен один из кодов:

* +SUCCESS+ - Проверка OTP завершилась успешно,
в ответе приложен новый токен.
Этот статус отправляется только в ответ на запрос проверки OTP кода.
* +OTP_REQUIRED+ - Для продолжения необходимо ввести OTP.
Далее можно либо запросить повторную отправку,
либо провести проверку введенного кода.
* +SEND_OTP_FAIL+ - Внутренняя ошибка при отправке OTP.
Это может быть как ошибка транспорта,
так и внутренняя ошибка в SSO.
Следует повторить запрос,
либо вывести уведомление о внутренней ошибке.
* +TOO_MANY_OTP+ - Превышен лимит запроосов на отправку OTP.
Далее можно лишь производить проверку уже отправленных сообщений,
запрашивать отправку новых данный пользователь не сможет на время +blockedFor+ в ответе.
* +TOO_MANY_WRONG_CODE+ - Количество попыток ввода OTP исчерпано.
Нельзя запрашивать ни отправку, ни проверку OTP.
Срок, через который можно возобновить работу,
приходит в поле +blockedFor+.
* +EXCEPTION+ - Необработанная ошибка в компоненте AAL.
Может быть следствием ошибок сетевого взаимодействия,
некорректного формата ответа со стороны SSO,
недоступностью SSO.
Следует повторить запрос,
либо вывести уведомление о внутренней ошибке.
